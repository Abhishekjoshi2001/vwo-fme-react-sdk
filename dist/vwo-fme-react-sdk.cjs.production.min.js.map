{"version":3,"file":"vwo-fme-react-sdk.cjs.production.min.js","sources":["../lib/logger/enums/LogLevelEnum.ts","../lib/logger/core/TransportManager.ts","../lib/logger/transports/ConsoleTransport.ts","../lib/logger/LogMessageBuilder.ts","../lib/utils/DataTypeUtil.ts","../lib/logger/core/LogManager.ts","../lib/services/LoggerService.ts","../lib/enum/LogMessageEnum.ts","../lib/utils/LogMessageUtil.ts","../lib/enum/HookEnum.ts","../lib/VWOContext.ts","../lib/useVWOClient.ts","../lib/VWOProvider.tsx","../lib/useGetFlag.ts","../lib/useGetFlagVariable.ts","../lib/useSetAttribute.ts","../lib/useTrackEvent.ts"],"sourcesContent":["/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum LogLevelEnum {\n  TRACE = 'trace',\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n}\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { dynamic } from '../../types/Common';\nimport { LogLevelEnum } from '../enums/LogLevelEnum';\nimport { LogMessageBuilder } from '../LogMessageBuilder';\nimport { Logger } from '../Logger';\nimport { isFunction } from '../../utils/DataTypeUtil';\n\nenum LogLevelNumberEnum {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n}\n\ninterface IlogTransport extends Logger {\n  transports: Array<Record<string, dynamic>>;\n  config: Record<string, dynamic>;\n\n  // Determines if a message should be logged based on the transport and configuration levels\n  shouldLog(transportLevel: string, configLevel: string): boolean;\n  // Logs a message at a specified level\n  log(level: string, message: string): void;\n}\n\n/**\n * Manages logging transports and delegates logging messages to them based on configuration.\n * Implements the IlogTransport interface.\n */\nexport class LogTransportManager implements IlogTransport {\n  transports: Array<Record<string, any>>;\n  config: Record<string, any>;\n\n  /**\n   * Initializes the manager with a configuration object.\n   * @param {Record<string, any>} config - Configuration settings for the log manager.\n   */\n  constructor(config: Record<string, any>) {\n    this.transports = [];\n    this.config = config;\n  }\n\n  /**\n   * Adds a new transport to the manager.\n   * @param {Record<string, any>} transport - The transport object to be added.\n   */\n  addTransport(transport: Record<string, any>): void {\n    this.transports.push(transport);\n  }\n\n  /**\n   * Determines if the log should be processed based on the transport and configuration levels.\n   * @param {string} transportLevel - The log level set for the transport.\n   * @param {string} configLevel - The log level set in the configuration.\n   * @returns {boolean} - Returns true if the log level is appropriate for logging, false otherwise.\n   */\n  shouldLog(transportLevel: string, configLevel: string): boolean {\n    // Default to the most specific level available\n    // transportLevel = transportLevel || configLevel || this.config.level;\n\n    const targetLevel = LogLevelNumberEnum[transportLevel.toUpperCase() as keyof typeof LogLevelNumberEnum];\n    const desiredLevel =\n      LogLevelNumberEnum[(configLevel || this.config.level).toUpperCase() as keyof typeof LogLevelNumberEnum];\n\n    return targetLevel >= desiredLevel;\n  }\n\n  /**\n   * Logs a message at TRACE level.\n   * @param {string} message - The message to log.\n   */\n  trace(message: string): void {\n    this.log(LogLevelEnum.TRACE, message);\n  }\n\n  /**\n   * Logs a message at DEBUG level.\n   * @param {string} message - The message to log.\n   */\n  debug(message: string): void {\n    this.log(LogLevelEnum.DEBUG, message);\n  }\n\n  /**\n   * Logs a message at INFO level.\n   * @param {string} message - The message to log.\n   */\n  info(message: string): void {\n    this.log(LogLevelEnum.INFO, message);\n  }\n\n  /**\n   * Logs a message at WARN level.\n   * @param {string} message - The message to log.\n   */\n  warn(message: string): void {\n    this.log(LogLevelEnum.WARN, message);\n  }\n\n  /**\n   * Logs a message at ERROR level.\n   * @param {string} message - The message to log.\n   */\n  error(message: string): void {\n    this.log(LogLevelEnum.ERROR, message);\n  }\n\n  /**\n   * Delegates the logging of messages to the appropriate transports.\n   * @param {string} level - The level at which to log the message.\n   * @param {string} message - The message to log.\n   */\n  log(level: string, message: string): void {\n    for (let i = 0; i < this.transports.length; i++) {\n      const logMessageBuilder = new LogMessageBuilder(this.config, this.transports[i]);\n      const formattedMessage = logMessageBuilder.formatMessage(level, message);\n      if (this.shouldLog(level, this.transports[i].level)) {\n        if (this.transports[i].log && isFunction(this.transports[i].log)) {\n          // Use custom log handler if available\n          this.transports[i].log(level, message);\n        } else {\n          // Otherwise, use the default log method\n          this.transports[i][level](formattedMessage);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogLevelEnum } from '../enums/LogLevelEnum';\nimport { Logger } from '../Logger';\n\n/**\n * ConsoleTransport class implements the Logger interface to provide logging functionality.\n * It outputs logs to the console based on the log level set in the configuration.\n */\nexport class ConsoleTransport implements Logger {\n  config: Record<string, any>; // Configuration object for the logger\n  level: string; // Current log level\n\n  /**\n   * Constructor initializes the ConsoleTransport with a configuration object.\n   * @param {Record<string, any>} config - Configuration settings for the logger, including 'level'.\n   */\n  constructor(config: Record<string, any> = {}) {\n    this.config = config; // Store the configuration\n    this.level = this.config.level; // Set the logging level from the configuration\n  }\n\n  /**\n   * Logs a trace message.\n   * @param {string} message - The message to log.\n   */\n  trace(message: string): void {\n    this.consoleLog(LogLevelEnum.TRACE, message);\n  }\n\n  /**\n   * Logs a debug message.\n   * @param {string} message - The message to log.\n   */\n  debug(message: string): void {\n    this.consoleLog(LogLevelEnum.DEBUG, message);\n  }\n\n  /**\n   * Logs an informational message.\n   * @param {string} message - The message to log.\n   */\n  info(message: string): void {\n    this.consoleLog(LogLevelEnum.INFO, message);\n  }\n\n  /**\n   * Logs a warning message.\n   * @param {string} message - The message to log.\n   */\n  warn(message: string): void {\n    this.consoleLog(LogLevelEnum.WARN, message);\n  }\n\n  /**\n   * Logs an error message.\n   * @param {string} message - The message to log.\n   */\n  error(message: string): void {\n    this.consoleLog(LogLevelEnum.ERROR, message);\n  }\n\n  /**\n   * Generic log function that logs messages to the console based on the log level.\n   * @param {string} level - The log level under which the message should be logged.\n   * @param {string} message - The message to log.\n   */\n  consoleLog(level: string, message: string): void {\n    (console[level as keyof Console] as Function)(message);\n  }\n}\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { dynamic } from '../types/Common';\nimport { LogLevelEnum } from './enums/LogLevelEnum';\n\n/**\n * Interface defining the structure for a log message builder.\n */\ninterface ILogMessageBuilder {\n  loggerConfig: Record<string, dynamic>; // Configuration for the logger\n  transportConfig: Record<string, dynamic>; // Configuration for the transport mechanism\n  prefix: string; // Prefix to be added to each log message\n  dateTimeFormat: dynamic; // Function or format for date and time in log messages\n\n  formatMessage(level: string, message: string): string; // Method to format a log message\n  getFormattedLevel(level: string): string; // Method to format the log level\n  getFormattedDateTime(): string; // Method to get formatted date and time\n}\n\n/**\n * Implements the ILogMessageBuilder interface to provide a concrete log message builder.\n */\nexport class LogMessageBuilder implements ILogMessageBuilder {\n  loggerConfig: Record<string, any>;\n  transportConfig: Record<string, any>;\n  prefix: string;\n  dateTimeFormat: any;\n\n  /**\n   * Constructs a new LogMessageBuilder instance.\n   * @param {Record<string, any>} loggerConfig - Configuration for the logger.\n   * @param {Record<string, any>} transportConfig - Configuration for the transport mechanism.\n   */\n  constructor(loggerConfig: Record<string, any>, transportConfig: Record<string, any>) {\n    this.loggerConfig = loggerConfig;\n    this.transportConfig = transportConfig;\n\n    // Set the prefix, defaulting to an empty string if not provided.\n    this.prefix = this.transportConfig.prefix || this.loggerConfig.prefix || '';\n    // Set the date and time format, defaulting to the logger's format if the transport's format is not provided.\n    this.dateTimeFormat = this.transportConfig.dateTimeFormat || this.loggerConfig.dateTimeFormat;\n  }\n\n  /**\n   * Formats a log message combining level, prefix, date/time, and the actual message.\n   * @param {string} level - The log level.\n   * @param {string} message - The message to log.\n   * @returns {string} The formatted log message.\n   */\n  formatMessage(level: string, message: string): string {\n    return `[${this.getFormattedLevel(level)}]: ${this.getFormattedPrefix(this.prefix)} ${this.getFormattedDateTime()} ${message}`;\n  }\n\n  getFormattedPrefix(prefix: string): string {\n    return `${prefix}`;\n  }\n\n  /**\n   * Returns the formatted log level with appropriate coloring based on the log level.\n   * @param {string} level - The log level.\n   * @returns {string} The formatted log level.\n   */\n  getFormattedLevel(level: string): string {\n    const upperCaseLevel = level.toUpperCase();\n    let LogLevelColorInfoEnum;\n\n    LogLevelColorInfoEnum = {\n      [LogLevelEnum.TRACE]: upperCaseLevel,\n      [LogLevelEnum.DEBUG]: upperCaseLevel,\n      [LogLevelEnum.INFO]: upperCaseLevel,\n      [LogLevelEnum.WARN]: upperCaseLevel,\n      [LogLevelEnum.ERROR]: upperCaseLevel,\n    };\n\n    return LogLevelColorInfoEnum[level as keyof typeof LogLevelColorInfoEnum];\n  }\n\n  /**\n   * Retrieves the current date and time formatted according to the specified format.\n   * @returns {string} The formatted date and time.\n   */\n  getFormattedDateTime(): string {\n    return this.dateTimeFormat();\n  }\n}\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { dynamic } from '../types/Common';\n\ntype FunctionType = (val: dynamic) => void;\n\n/**\n * Checks if a value is a function.\n * @param val The value to check.\n * @returns True if the value is a function, false otherwise.\n */\nexport function isFunction(val: dynamic): val is FunctionType {\n  return Object.prototype.toString.call(val) === '[object Function]';\n}\n\n/**\n * Checks if a value is an object (excluding arrays, functions, regex, promises, and dates).\n * @param val The value to check.\n * @returns True if the value is a valid object, false otherwise.\n */\nexport function isObject<T>(\n  val: T,\n): val is Record<any, dynamic> & Exclude<T, Array<dynamic> | FunctionType | RegExp | Promise<dynamic> | Date> {\n  return Object.prototype.toString.call(val) === '[object Object]';\n}\n\n/**\n * Checks if a value is a string.\n * @param val The value to check.\n * @returns True if the value is a string, false otherwise.\n */\nexport function isString(val: dynamic): val is string {\n  return typeof val === 'string' || Object.prototype.toString.call(val) === '[object String]';\n}\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { dynamic } from '../../types/Common';\n\nimport { Logger } from '../Logger';\nimport { ConsoleTransport } from '../transports/ConsoleTransport';\nimport { LogTransportManager } from './TransportManager';\nimport { LogLevelEnum } from '../enums/LogLevelEnum';\n\n/**\n * Interface defining the structure and methods for LogManager.\n */\nexport interface ILogManager {\n  transportManager?: LogTransportManager;\n  config?: Record<string, dynamic>;\n  name?: string;\n  requestId?: string;\n  level: string;\n  prefix?: string;\n  dateTimeFormat?: () => string;\n\n  transport?: Record<string, dynamic>;\n  transports?: Array<Record<string, dynamic>>;\n\n  addTransport?(transportObject: Record<string, dynamic>): void;\n  addTransports?(transportsList: Array<Record<string, dynamic>>): void;\n}\n\n/**\n * LogManager class provides logging functionality with support for multiple transports.\n * It is designed as a singleton to ensure a single instance throughout the application.\n */\nexport class LogManager extends Logger implements ILogManager {\n  private static instance: LogManager; // Singleton instance of LogManager\n  transportManager: LogTransportManager;\n  config: Record<string, any>;\n  name = 'VWO Logger'; // Default logger name\n  requestId = new Date().getTime().toString(); // current timestamp in milliseconds\n  level = LogLevelEnum.ERROR; // Default logging level\n  prefix = 'VWO-SDK'; // Default prefix for log messages\n  public dateTimeFormat(): string {\n    return new Date().toISOString(); // Default date-time format for log messages\n  }\n  transport: Record<string, any>;\n  transports: Array<Record<string, any>>;\n\n  /**\n   * Constructor for LogManager.\n   * @param {Record<string, any>} config - Configuration object for LogManager.\n   */\n  constructor(config?: Record<string, any>) {\n    super();\n\n    this.config = config;\n\n    if (config.isAlwaysNewInstance || !LogManager.instance) {\n      LogManager.instance = this;\n\n      // Initialize configuration with defaults or provided values\n      this.config.name = config.name || this.name;\n      this.config.requestId = config.requestId || this.requestId;\n      this.config.level = config.level || this.level;\n      this.config.prefix = config.prefix || this.prefix;\n      this.config.dateTimeFormat = config.dateTimeFormat || this.dateTimeFormat;\n\n      this.transportManager = new LogTransportManager(this.config);\n\n      this.handleTransports();\n    }\n\n    return LogManager.instance;\n  }\n\n  /**\n   * Provides access to the singleton instance of LogManager.\n   * @returns {LogManager} The singleton instance.\n   */\n  static get Instance(): LogManager {\n    return LogManager.instance;\n  }\n\n  /**\n   * Handles the initialization and setup of transports based on configuration.\n   */\n  handleTransports(): void {\n    this.addTransport(\n      new ConsoleTransport({\n        level: this.config.level,\n      }),\n    );\n  }\n\n  /**\n   * Adds a single transport to the LogManager.\n   * @param {Record<string, any>} transport - The transport object to add.\n   */\n  addTransport(transport: Record<string, any>): void {\n    this.transportManager.addTransport(transport);\n  }\n\n  /**\n   * Adds multiple transports to the LogManager.\n   * @param {Array<Record<string, any>>} transports - The list of transport objects to add.\n   */\n  addTransports(transports: Record<string, any>[]): void {\n    for (let i = 0; i < transports.length; i++) {\n      this.addTransport(transports[i]);\n    }\n  }\n\n  /**\n   * Logs a trace message.\n   * @param {string} message - The message to log at trace level.\n   */\n  trace(message: string): void {\n    this.transportManager.log(LogLevelEnum.TRACE, message);\n  }\n\n  /**\n   * Logs a debug message.\n   * @param {string} message - The message to log at debug level.\n   */\n  debug(message: string): void {\n    this.transportManager.log(LogLevelEnum.DEBUG, message);\n  }\n\n  /**\n   * Logs an informational message.\n   * @param {string} message - The message to log at info level.\n   */\n  info(message: string): void {\n    this.transportManager.log(LogLevelEnum.INFO, message);\n  }\n\n  /**\n   * Logs a warning message.\n   * @param {string} message - The message to log at warn level.\n   */\n  warn(message: string): void {\n    this.transportManager.log(LogLevelEnum.WARN, message);\n  }\n\n  /**\n   * Logs an error message.\n   * @param {string} message - The message to log at error level.\n   */\n  error(message: string): void {\n    this.transportManager.log(LogLevelEnum.ERROR, message);\n  }\n}\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * logger.ts - Global Logger Singleton\n */\nimport { LogManager } from '../logger/core/LogManager';\n\nlet logger: LogManager | null = null;\n\n/**\n * Initializes the global logger instance.\n * This function should be called inside `VWOProvider` before logging is used anywhere in the application.\n *\n * @param {object} config - The logger configuration object.\n * @param {object} config.logger - Optional logging configuration (e.g., log level, transports).\n * @returns {void} No return value; initializes the logger instance.\n */\nexport function initLogger(config: any) {\n  if (!logger) {\n    logger = new LogManager(config?.logger || {});\n  }\n  return logger;\n}\n\n/**\n * Retrieves the global logger instance.\n * Ensures that `initLogger` has been called before attempting to use logging.\n *\n * @returns {LogManager} The global logger instance.\n */\nexport function getLogger(): LogManager {\n  if (!logger) {\n    logger = new LogManager({ level: 'error' });\n  }\n  return logger;\n}\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum LogMessageEnum {\n  // common messages\n  VWO_CLIENT_MISSING = 'VWO Client is missing in {hookName} hook. Ensure VWOProvider is correctly initialized.',\n  INVALID_CONTEXT = 'Invalid user context in {hookName} hook. Ensure a valid userContext is provided.',\n  HOOK_ERROR = 'Error in {hookName} hook: {error}',\n  INVALID_HOOK_USAGE = '{hookName} must be used within a VWOProvider !!',\n\n  // VWO Provider Messages\n  VWO_PROVIDER_CLIENT_CONFIG_WARNING = 'VWOProvider Warning: Both `client` and `config` are provided. The `client` prop will take precedence, and the `config` props will be disregarded.',\n  VWO_PROVIDER_CONFIG_REQUIRED = 'VWOProvider Error: Either `client` or `config` must be provided.',\n  VWO_SDK_INITIALIZATION_FAILED = 'VWO-SDK Initialization failed: {error}',\n\n  // useTrackEvent Messages\n  VWO_TRACK_EVENT_NAME_REQUIRED = 'Event name is required for useTrackEvent hook and it should be a string',\n  VWO_TRACK_EVENT_ERROR = 'Error tracking event - {eventName}: {error}',\n\n  // useSetAttribute Messages\n  VWO_SET_ATTRIBUTE_MAP_REQUIRED = 'attributeMap (object having key-value pairs of user attributes) is required for useSetAttribute hook',\n  VWO_SET_ATTRIBUTE_ERROR = 'Error setting attributes: {error}',\n  VWO_SET_ATTRIBUTE_SUCCESS = 'User attributes set: {attributes}',\n\n  // useGetFlag Messages\n  VWO_NOT_READY_IN_USE_GET_FLAG = 'VWO is not ready in useGetFlag hook',\n  VWO_GET_FLAG_FEATURE_KEY_REQUIRED = 'Feature key is required for useGetFlag hook',\n  VWO_GET_FLAG_ERROR = 'Error fetching feature flag - {featureKey}: {error}',\n\n  // useGetFlagVariable Messages\n  VWO_GET_FLAG_VARIABLES_FLAG_REQUIRED = 'Flag is required for useGetFlagVariables hook and should be an object',\n  VWO_GET_FLAG_VARIABLES_ERROR = 'Error getting flag variables: {error}',\n  VWO_GET_FLAG_VARIABLE_REQUIRED = 'Flag and variable key are required for useGetFlagVariable hook',\n  VWO_GET_FLAG_VARIABLE_ERROR = 'Error getting flag variable: {error}',\n}\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isFunction } from './DataTypeUtil';\n\nconst nargs = /\\{([0-9a-zA-Z_]+)\\}/g;\n\n/**\n * Constructs a message by replacing placeholders in a template with corresponding values from a data object.\n *\n * @param {string} template - The message template containing placeholders in the format `{key}`.\n * @param {Record<string, any>} data - An object containing keys and values used to replace the placeholders in the template.\n * @returns {string} The constructed message with all placeholders replaced by their corresponding values from the data object.\n */\nexport function buildMessage(template: string, data: Record<string, any> = {}): string {\n  try {\n    return template.replace(nargs, (match, key, index) => {\n      // Check for escaped placeholders\n      if (template[index - 1] === '{' && template[index + match.length] === '}') {\n        return key;\n      }\n\n      // Retrieve the value from the data object\n      const value = data[key];\n\n      // If the key does not exist or the value is null/undefined, return an empty string\n      if (value === undefined || value === null) {\n        return '';\n      }\n\n      // If the value is a function, evaluate it\n      return isFunction(value) ? value() : value;\n    });\n  } catch (err) {\n    return template; // Return the original template in case of an error\n  }\n}\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum HookEnum {\n  VWO_CLIENT = 'useVWOClient',\n  VWO_CONTEXT = 'useVWOContext',\n  VWO_GET_FLAG = 'useGetFlag',\n  VWO_GET_FLAG_VARIABLE = 'useGetFlagVariable',\n  VWO_GET_FLAG_VARIABLES = 'useGetFlagVariables',\n  VWO_TRACK_EVENT = 'useTrackEvent',\n  VWO_SET_ATTRIBUTE = 'useSetAttribute',\n}\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContext, useContext } from 'react';\nimport { getLogger } from './services/LoggerService';\nimport { IVWOClient, IVWOContextModel } from 'vwo-fme-node-sdk';\nimport { LogMessageEnum } from './enum/LogMessageEnum';\nimport { buildMessage } from './utils/LogMessageUtil';\nimport { HookEnum } from './enum/HookEnum';\ninterface VWOContextType {\n  vwoClient: IVWOClient | null;\n  userContext?: IVWOContextModel | null;\n  setUserContext?: (context: IVWOContextModel) => void;\n  isReady?: boolean;\n}\n\nexport const VWOContext = createContext<VWOContextType>({\n  vwoClient: null,\n  userContext: null,\n  setUserContext: undefined,\n  isReady: false,\n});\n\nexport const useVWOContext = (): VWOContextType | null => {\n  const logger = getLogger();\n  try {\n    // Fetch the context\n    const context = useContext(VWOContext);\n\n    // If the context is not found, throw an error\n    if (!context) {\n      logger.error(buildMessage(LogMessageEnum.INVALID_HOOK_USAGE, { hookName: HookEnum.VWO_CONTEXT }));\n      return null;\n    }\n    return context;\n  } catch (error) {\n    logger.error(buildMessage(LogMessageEnum.HOOK_ERROR, { error, hookName: HookEnum.VWO_CONTEXT }));\n    return null;\n  }\n};\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IVWOClient } from 'vwo-fme-node-sdk';\nimport { getLogger } from './services/LoggerService';\nimport { useVWOContext } from './VWOContext';\nimport { LogMessageEnum } from './enum/LogMessageEnum';\nimport { buildMessage } from './utils/LogMessageUtil';\nimport { HookEnum } from './enum/HookEnum';\nconst defaultVwoClientResult: VWOClientResult = {\n  vwoClient: null,\n  isReady: false,\n};\n\nexport interface VWOClientResult {\n  vwoClient: IVWOClient | null;\n  isReady: boolean;\n}\n\n/**\n * Returns the VWO SDK client instance\n * @returns VWO SDK client instance\n */\nexport const useVWOClient = (): VWOClientResult => {\n  const logger = getLogger();\n\n  try {\n    const context = useVWOContext();\n\n    if (!context) {\n      logger.error(buildMessage(LogMessageEnum.INVALID_HOOK_USAGE, { hookName: HookEnum.VWO_CLIENT }));\n      return defaultVwoClientResult;\n    }\n\n    if (!context.isReady) {\n      return defaultVwoClientResult;\n    }\n\n    return {\n      vwoClient: context.vwoClient,\n      isReady: true,\n    };\n  } catch (error) {\n    logger.error(buildMessage(LogMessageEnum.HOOK_ERROR, { error, hookName: HookEnum.VWO_CLIENT }));\n    return defaultVwoClientResult;\n  }\n};\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState, ReactNode, useMemo } from 'react';\nimport { init, IVWOContextModel, IVWOClient, IVWOOptions } from 'vwo-fme-node-sdk';\nimport { VWOContext } from './VWOContext';\nimport { initLogger } from './services/LoggerService';\nimport { LogMessageEnum } from './enum/LogMessageEnum';\nimport { buildMessage } from './utils/LogMessageUtil';\n\nexport interface VWOProviderWithClient {\n  client: IVWOClient;\n  userContext?: IVWOContextModel;\n  children: ReactNode;\n  fallbackComponent?: ReactNode;\n}\n\nexport interface VWOProviderWithConfig {\n  config: IVWOOptions;\n  userContext?: IVWOContextModel;\n  children: ReactNode;\n  fallbackComponent?: ReactNode;\n}\n\nexport type IVWOProvider = VWOProviderWithClient | VWOProviderWithConfig;\n\n/**\n * VWOProvider component to provide VWO client and configuration context to child components.\n * \n * @param props - The props for the VWOProvider component.\n * @returns A React element that provides the VWO client and configuration context to child components.\n */\nexport function VWOProvider(props: IVWOProvider): React.ReactElement {\n  const { userContext, children, fallbackComponent } = props;\n  const client = 'client' in props ? props.client : null;\n  const config = 'config' in props ? props.config : null;\n  \n  const [vwoClient, setVwoClient] = useState<IVWOClient | null>(client || null);\n  const [context, setContext] = useState<IVWOContextModel | null>(userContext || null);\n  const [isReady, setIsReady] = useState<boolean>(false);\n\n  const logger = initLogger(client?.options || config);\n  const memoizedConfig = useMemo(() => config || client?.options, []);\n\n  // Initialize the VWO SDK instance only once when the component mounts or if config is updated\n  useEffect(() => {\n    if(config && vwoClient) {\n      logger.warn(LogMessageEnum.VWO_PROVIDER_CLIENT_CONFIG_WARNING);\n    }\n    if (vwoClient) {\n      setIsReady(true);\n      return;\n    } else if (!config) {\n      logger.error(LogMessageEnum.VWO_PROVIDER_CONFIG_REQUIRED);\n      return;\n    }\n\n    const initializeVWO = async () => {\n      try {\n        if (!vwoClient && config) {\n          // Initialize the VWO SDK instance if vwoClient is not already initialized\n          const instance = await init(config);\n          setVwoClient(instance);\n          setIsReady(true);\n        }\n      } catch (error) {\n        logger.error(buildMessage(LogMessageEnum.VWO_SDK_INITIALIZATION_FAILED, { error }));\n      }\n    };\n\n    // Only initialize once\n    if (!vwoClient && config) {\n      initializeVWO();\n    }\n  }, [memoizedConfig]); // Re-run only when config changes\n\n  return (\n    <VWOContext.Provider value={{ vwoClient, userContext: context, setUserContext: setContext, isReady }}>\n      {fallbackComponent && !isReady ? fallbackComponent : children}\n    </VWOContext.Provider>\n  );\n};\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useVWOContext } from './VWOContext';\nimport { getLogger } from './services/LoggerService';\nimport { isObject } from './utils/DataTypeUtil';\nimport { Flag, IVWOContextModel } from 'vwo-fme-node-sdk';\nimport { LogMessageEnum } from './enum/LogMessageEnum';\nimport { buildMessage } from './utils/LogMessageUtil';\nimport { HookEnum } from './enum/HookEnum';\nexport interface IFlag {\n  flag: Flag;\n  isReady: boolean;\n}\n\nconst createDefaultFlag = () =>\n  ({\n    isEnabled: () => false,\n    getVariables: (): unknown[] => [],\n    getVariable: <T = unknown>(key: string, defaultValue?: T) => defaultValue,\n  }) as unknown as Flag;\n\n/**\n * Custom hook to retrieve a feature flag using VWO client.\n *\n * @param {string} featureKey - The key of the feature flag to retrieve.\n * @param {Object} [context] - Optional user context to use for fetching the flag.\n * @returns {FlagResult} An object containing the flag and a readiness status.\n */\nexport const useGetFlag = (featureKey: string, context?: IVWOContextModel): IFlag => {\n  const defaultFlagResult: IFlag = {\n    flag: createDefaultFlag(),\n    isReady: false,\n  };\n  const { vwoClient, userContext, setUserContext, isReady } = useVWOContext();\n  const [flag, setFlag] = useState<Flag>(defaultFlagResult.flag);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const logger = getLogger();\n\n  const stableUserContext = useMemo(() => {\n    return (context || userContext || {}) as IVWOContextModel;\n  }, [JSON.stringify(context || userContext || {})]);\n\n  const getFlag = useCallback(async () => {\n    try {\n      if (!isReady) {\n        logger.error(LogMessageEnum.VWO_NOT_READY_IN_USE_GET_FLAG);\n        return;\n      }\n\n      const result = await vwoClient.getFlag(featureKey, stableUserContext);\n      setFlag(result);\n\n      setUserContext(stableUserContext);\n    } catch (error) {\n      logger.error(\n        buildMessage(LogMessageEnum.VWO_GET_FLAG_ERROR, {\n          featureKey,\n          error,\n        }),\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  }, [featureKey, stableUserContext, isReady]);\n\n  useEffect(() => {\n    if (!featureKey) {\n      logger.error(LogMessageEnum.VWO_GET_FLAG_FEATURE_KEY_REQUIRED);\n      return;\n    }\n\n    if (!isObject(stableUserContext) || !stableUserContext.id) {\n      logger.error(buildMessage(LogMessageEnum.INVALID_CONTEXT, { hookName: HookEnum.VWO_GET_FLAG }));\n      return;\n    }\n    // Check if all required dependencies are available\n    // stableUserContext && stableUserContext.id - check is added to handle the case where VWOProvider is not initialized\n    if (isReady && vwoClient && stableUserContext) {\n      getFlag();\n    }\n  }, [featureKey, JSON.stringify(stableUserContext), isReady]);\n\n  return {\n    flag,\n    isReady: !isLoading && !!flag,\n  };\n};\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isObject } from './utils/DataTypeUtil';\nimport { getLogger } from './services/LoggerService';\nimport { Flag } from 'vwo-fme-node-sdk';\nimport { LogMessageEnum } from './enum/LogMessageEnum';\nimport { buildMessage } from './utils/LogMessageUtil';\n\n/**\n * Hook to get all variables from a flag\n * @param flag - The flag to get the variables from\n * @returns The variables from the flag\n */\nexport const useGetFlagVariables = (flag: Flag): Array<Record<string, unknown>> => {\n  const logger = getLogger();\n  try {\n    if (!flag || !isObject(flag)) {\n      logger.error(LogMessageEnum.VWO_GET_FLAG_VARIABLES_FLAG_REQUIRED);\n      return [];\n    }\n\n    return flag.getVariables();\n  } catch (error) {\n    logger.error(buildMessage(LogMessageEnum.VWO_GET_FLAG_VARIABLES_ERROR, { error }));\n    return [];\n  }\n};\n\n/**\n * Hook to get a flag variable\n * @param flag - The flag to get the variable from\n * @param variableKey - The key of the variable to get\n * @param defaultValue - The default value to return if the variable is not found\n * @returns The value of the variable\n */\nexport const useGetFlagVariable = <T>(flag: Flag, variableKey: string, defaultValue: T): T => {\n  const logger = getLogger();\n  try {\n    if (!flag || !isObject(flag)) {\n      return defaultValue;\n    }\n\n    if (!variableKey) {\n      logger.error(LogMessageEnum.VWO_GET_FLAG_VARIABLE_REQUIRED);\n      return defaultValue;\n    }\n\n    return flag.getVariable(variableKey, defaultValue);\n  } catch (error) {\n    logger.error(buildMessage(LogMessageEnum.VWO_GET_FLAG_VARIABLE_ERROR, { error }));\n    return defaultValue;\n  }\n};\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useVWOContext } from './VWOContext';\nimport { isObject } from './utils/DataTypeUtil';\nimport { getLogger } from './services/LoggerService';\nimport { LogMessageEnum } from './enum/LogMessageEnum';\nimport { buildMessage } from './utils/LogMessageUtil';\nimport { HookEnum } from './enum/HookEnum';\n\n/**\n * Interface for the return type of useSetAttribute hook\n */\nexport interface ISetAttribute {\n  setAttribute: (attributeMap: Record<string, string | number | boolean>) => void;\n  isReady: boolean;\n}\n\n/**\n * Hook to return a function for setting user attributes.\n * @returns {ISetAttribute} Object containing setAttribute function and isReady boolean\n */\nexport const useSetAttribute = (): ISetAttribute => {\n  const logger = getLogger();\n\n  // Fetch the vwoClient and userContext from the context\n  const { vwoClient, userContext, isReady } = useVWOContext();\n\n  /**\n   * Function to set user attributes dynamically\n   * @param attributeMap - The map of attributes to set\n   */\n  const setAttribute = (attributeMap: Record<string, string | number | boolean>): void => {\n    // Return a no-op function if vwoClient or userContext is not available\n    if (!isReady) {\n      logger.error(buildMessage(LogMessageEnum.VWO_CLIENT_MISSING, { hookName: HookEnum.VWO_SET_ATTRIBUTE }));\n      return;\n    }\n    if (!userContext || !isObject(userContext) || !userContext.id) {\n      logger.error(buildMessage(LogMessageEnum.INVALID_CONTEXT, { hookName: HookEnum.VWO_SET_ATTRIBUTE }));\n      return;\n    }\n    if (!attributeMap || !isObject(attributeMap) || Object.keys(attributeMap).length === 0) {\n      logger.error(LogMessageEnum.VWO_SET_ATTRIBUTE_MAP_REQUIRED);\n      return;\n    }\n\n    try {\n      vwoClient.setAttribute(attributeMap, userContext); // Set the attributes\n      logger.info(\n        buildMessage(LogMessageEnum.VWO_SET_ATTRIBUTE_SUCCESS, {\n          attributes: JSON.stringify(attributeMap),\n        }),\n      );\n    } catch (error) {\n      logger.error(buildMessage(LogMessageEnum.VWO_SET_ATTRIBUTE_ERROR, { error }));\n    }\n  };\n\n  return { setAttribute, isReady };\n};\n","/**\n * Copyright 2025 Wingify Software Pvt. Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getLogger } from './services/LoggerService';\nimport { useVWOContext } from './VWOContext';\nimport { isObject, isString } from './utils/DataTypeUtil';\nimport { LogMessageEnum } from './enum/LogMessageEnum';\nimport { buildMessage } from './utils/LogMessageUtil';\nimport { HookEnum } from './enum/HookEnum';\n/**\n * Interface for the return type of useTrackEvent hook\n */\nexport interface ITrackEvent {\n  trackEvent: (\n    eventName: string,\n    eventProperties?: Record<string, string | number | boolean>,\n  ) => Promise<Record<string, boolean>>;\n  isReady: boolean;\n}\n\n/**\n * Hook to provide the trackEvent function for tracking events.\n * @returns {ITrackEvent} Object containing trackEvent function and isReady boolean\n */\nexport const useTrackEvent = (): ITrackEvent => {\n  const logger = getLogger();\n\n  // Fetch the vwoClient and userContext from the context\n  const { vwoClient, userContext, isReady } = useVWOContext();\n\n  /**\n   * trackEvent function to be returned by the hook\n   * @param eventName - The name of the event to track\n   * @param eventProperties - The properties of the event (optional)\n   */\n  const trackEvent = async (\n    eventName: string,\n    eventProperties: Record<string, string | number | boolean> = {},\n  ): Promise<Record<string, boolean>> => {\n    if (!isReady) {\n      logger.error(buildMessage(LogMessageEnum.VWO_CLIENT_MISSING, { hookName: HookEnum.VWO_TRACK_EVENT }));\n      return Promise.resolve({});\n    }\n    if (!eventName || !isString(eventName)) {\n      logger.error(LogMessageEnum.VWO_TRACK_EVENT_NAME_REQUIRED);\n      return Promise.resolve({});\n    }\n\n    // Ensure userContext is valid\n    if (!userContext || !isObject(userContext) || !userContext.id) {\n      logger.error(buildMessage(LogMessageEnum.INVALID_CONTEXT, { hookName: HookEnum.VWO_TRACK_EVENT }));\n      return Promise.resolve({});\n    }\n\n    try {\n      return await vwoClient.trackEvent(eventName, userContext, eventProperties);\n    } catch (error) {\n      logger.error(\n        buildMessage(LogMessageEnum.VWO_TRACK_EVENT_ERROR, {\n          eventName,\n          error: error instanceof Error ? error.message : error,\n        }),\n      );\n      return Promise.resolve({});\n    }\n  };\n\n  return { trackEvent, isReady };\n};\n"],"names":["LogLevelEnum","LogLevelNumberEnum","ConsoleTransport","constructor","config","this","level","trace","message","consoleLog","TRACE","debug","DEBUG","info","INFO","warn","WARN","error","ERROR","console","LogMessageBuilder","loggerConfig","transportConfig","prefix","dateTimeFormat","formatMessage","getFormattedLevel","getFormattedPrefix","getFormattedDateTime","upperCaseLevel","toUpperCase","LogLevelColorInfoEnum","[object Object]","isFunction","val","Object","prototype","toString","call","isObject","LogTransportManager","transports","addTransport","transport","push","shouldLog","transportLevel","configLevel","log","i","length","formattedMessage","LogManager","super","Date","getTime","isAlwaysNewInstance","instance","name","requestId","transportManager","handleTransports","toISOString","Instance","addTransports","logger","initLogger","getLogger","LogMessageEnum","nargs","buildMessage","template","data","replace","match","key","index","value","err","HookEnum","VWOContext","createContext","vwoClient","userContext","setUserContext","undefined","isReady","useVWOContext","useContext","INVALID_HOOK_USAGE","hookName","VWO_CONTEXT","HOOK_ERROR","defaultVwoClientResult","props","children","fallbackComponent","client","setVwoClient","useState","context","setContext","setIsReady","options","memoizedConfig","useMemo","useEffect","VWO_PROVIDER_CLIENT_CONFIG_WARNING","async","init","VWO_SDK_INITIALIZATION_FAILED","initializeVWO","VWO_PROVIDER_CONFIG_REQUIRED","React","Provider","useGetFlag","featureKey","flag","setFlag","isEnabled","getVariables","getVariable","defaultValue","isLoading","setIsLoading","stableUserContext","JSON","stringify","getFlag","useCallback","VWO_NOT_READY_IN_USE_GET_FLAG","result","VWO_GET_FLAG_ERROR","id","INVALID_CONTEXT","VWO_GET_FLAG","VWO_GET_FLAG_FEATURE_KEY_REQUIRED","useGetFlagVariable","variableKey","VWO_GET_FLAG_VARIABLE_REQUIRED","VWO_GET_FLAG_VARIABLE_ERROR","VWO_GET_FLAG_VARIABLES_FLAG_REQUIRED","VWO_GET_FLAG_VARIABLES_ERROR","useSetAttribute","setAttribute","attributeMap","keys","VWO_SET_ATTRIBUTE_SUCCESS","attributes","VWO_SET_ATTRIBUTE_ERROR","VWO_SET_ATTRIBUTE_MAP_REQUIRED","VWO_SET_ATTRIBUTE","VWO_CLIENT_MISSING","useTrackEvent","trackEvent","eventName","eventProperties","VWO_TRACK_EVENT","Promise","resolve","VWO_TRACK_EVENT_NAME_REQUIRED","VWO_TRACK_EVENT_ERROR","Error","useVWOClient","VWO_CLIENT"],"mappings":"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"}